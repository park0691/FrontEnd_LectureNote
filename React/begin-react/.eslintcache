[{"C:\\Users\\park\\OneDrive\\Lecture\\FastCampus\\React\\react-tutorial\\begin-react\\src\\App.js":"1","C:\\Users\\park\\OneDrive\\Lecture\\FastCampus\\React\\react-tutorial\\begin-react\\src\\Hello.js":"2","C:\\Users\\park\\OneDrive\\Lecture\\FastCampus\\React\\react-tutorial\\begin-react\\src\\UserList.js":"3","C:\\Users\\park\\OneDrive\\Lecture\\FrontEnd_LectureNote\\React\\begin-react\\src\\index.js":"4","C:\\Users\\park\\OneDrive\\Lecture\\FrontEnd_LectureNote\\React\\begin-react\\src\\Hello.js":"5","C:\\Users\\park\\OneDrive\\Lecture\\FrontEnd_LectureNote\\React\\begin-react\\src\\UserList.js":"6","C:\\Users\\park\\OneDrive\\Lecture\\FrontEnd_LectureNote\\React\\begin-react\\src\\Counter.js":"7","C:\\Users\\park\\OneDrive\\Lecture\\FrontEnd_LectureNote\\React\\begin-react\\src\\App.js":"8"},{"size":2300,"mtime":1609166531527,"results":"9","hashOfConfig":"10"},{"size":262,"mtime":1609143667253,"results":"11","hashOfConfig":"10"},{"size":1726,"mtime":1609166027179,"results":"12","hashOfConfig":"10"},{"size":500,"mtime":1609335678599,"results":"13","hashOfConfig":"14"},{"size":262,"mtime":1609143667253,"results":"15","hashOfConfig":"14"},{"size":1726,"mtime":1609166027179,"results":"16","hashOfConfig":"14"},{"size":892,"mtime":1609335674896,"results":"17","hashOfConfig":"14"},{"size":3036,"mtime":1609338713795,"results":"18","hashOfConfig":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"7mkpd6",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xf6lip",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"C:\\Users\\park\\OneDrive\\Lecture\\FastCampus\\React\\react-tutorial\\begin-react\\src\\App.js",["37","38","39","40"],"import { useRef, useState, useMemo, useCallback } from 'react';\nimport Counter from './Counter';\nimport CreateUser from './CreateUser';\nimport Hello from './Hello';\nimport InputSample from './InputSample';\nimport UserList from './UserList';\nimport Wrapper from './Wrapper';\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자를 세는 중...');\n  return users.filter(user => user.active).length;\n}\n\nfunction App() {\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: '',\n  });\n  const { username, email } = inputs;\n  const onChange = useCallback(e => {\n    const { name, value } = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value\n    });\n  }, [inputs]);\n  const [users, setUsers] = useState([\n    {\n      id: 1,\n      username: 'velopert',\n      email: 'public.velopert@gmail.com',\n      active: true\n    },\n    {\n      id: 2,\n      username: 'park',\n      email: 'park@example.com',\n      active: false\n    },\n    {\n      id: 3,\n      username: 'lee',\n      email: 'lee@pusan.ac.kr',\n      active: false\n    }\n  ]);\n  /* useRef -> 컴포넌트 리렌더링되도 값 유지. 값이 바껴도 컴포넌트 리렌더링되지 않는다. */\n  const nextId = useRef(4);\n  /* useCallback -> 함수 재사용 */\n  const onCreate = useCallback(() => {\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    }\n    // setUsers([...users, user]);\n    setUsers(users => users.concat(user));\n    setInputs({\n      username: '',\n      email: '',\n    });\n    nextId.current += 1;\n  }, [username, email]);\n\n  const onRemove = useCallback(id => {\n    setUsers(users => users.filter(user => user.id !== id));\n  }, []);\n\n  const onToggle = useCallback(id => {\n    setUsers(users => users.map(\n      user => user.id === id\n        ? { ...user, active: !user.active }\n        : user\n    ));\n  }, []);\n  /* useMemo -> 연산된 값 재사용 */\n  const count = useMemo(() => countActiveUsers(users), [users]);\n\n  return (\n    <>\n      <CreateUser\n        username={username}\n        email={email}\n        onChange={onChange}\n        onCreate={onCreate}\n      />\n      <UserList\n        users={users}\n        onRemove={onRemove}\n        onToggle={onToggle}\n      />\n      <div>활성 사용자 수: {count}</div>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\park\\OneDrive\\Lecture\\FastCampus\\React\\react-tutorial\\begin-react\\src\\Hello.js",[],"C:\\Users\\park\\OneDrive\\Lecture\\FastCampus\\React\\react-tutorial\\begin-react\\src\\UserList.js",[],"C:\\Users\\park\\OneDrive\\Lecture\\FrontEnd_LectureNote\\React\\begin-react\\src\\index.js",[],"C:\\Users\\park\\OneDrive\\Lecture\\FrontEnd_LectureNote\\React\\begin-react\\src\\Hello.js",[],"C:\\Users\\park\\OneDrive\\Lecture\\FrontEnd_LectureNote\\React\\begin-react\\src\\UserList.js",[],"C:\\Users\\park\\OneDrive\\Lecture\\FrontEnd_LectureNote\\React\\begin-react\\src\\Counter.js",["41"],"C:\\Users\\park\\OneDrive\\Lecture\\FrontEnd_LectureNote\\React\\begin-react\\src\\App.js",["42","43","44","45","46","47"],"import { useRef, useReducer, useMemo, useCallback } from 'react';\nimport Counter from './Counter';\nimport CreateUser from './CreateUser';\nimport Hello from './Hello';\nimport InputSample from './InputSample';\nimport UserList from './UserList';\nimport Wrapper from './Wrapper';\nimport useInputs from './useInputs';\n\nfunction countActiveUsers(users) {\n  console.log('활성 사용자를 세는 중...');\n  return users.filter(user => user.active).length;\n}\n\nconst initialState = {\n  users: [\n    {\n      id: 1,\n      username: 'velopert',\n      email: 'public.velopert@gmail.com',\n      active: true\n    },\n    {\n      id: 2,\n      username: 'park',\n      email: 'park@example.com',\n      active: false\n    },\n    {\n      id: 3,\n      username: 'lee',\n      email: 'lee@pusan.ac.kr',\n      active: false\n    }\n  ]\n};\n\n/*\n  useState vs. useReducer\n  컴포넌트에서 관리하는 값이 하나고, 단순한 값이면 useState로 관리하는 것이 편리함.\n  컴포넌트에서 관리하는 값이 여러 개가 되어 구조가 복잡하거나, users 배열에 추가하거나 삭제할 때 useReducer가 편리할 수 있음.\n  개발자의 기호에 따라 알맞게 사용하도록 한다.\n*/\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CREATE_USER':\n      return {\n        // input 초기화 (기존 useState - input 초기화와 user 배열 업데이트 따로했는데 동시에 가능)\n        inputs: initialState.inputs,\n        users: state.users.concat(action.user)\n      };\n    case 'TOGGLE_USER':\n      return {\n        ...state,\n        users: state.users.map(user =>\n          user.id === action.id\n            ? { ...user, active: !user.active }\n            : user\n          )\n      };\n    case 'REMOVE_USER':\n      return {\n        ...state,\n        users: state.users.filter(user => user.id !== action.id)\n      }\n    default:\n      throw new Error('Unhandled action');\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [form, onChange, reset] = useInputs({\n    username: '',\n    email: '',\n  });\n  const { username, email } = form;\n  const nextId = useRef(4);\n  const { users } = state;\n\n  const onCreate = useCallback(() => {\n    dispatch({\n      type: 'CREATE_USER',\n      user: {\n        id: nextId.current,\n        username,\n        email\n      }\n    });\n    nextId.current += 1;\n    reset();\n  }, [username, email, reset]);\n\n  const onToggle = useCallback(id => {\n    dispatch({\n      type: 'TOGGLE_USER',\n      id\n    });\n  });\n\n  const onRemove = useCallback(id => {\n    dispatch({\n      type: 'REMOVE_USER',\n      id\n    });\n  });\n\n  const count = useMemo(() => countActiveUsers(users), [users]);\n\n  return (\n    <>\n      <CreateUser\n        username={username}\n        email={email}\n        onChange={onChange}\n        onCreate={onCreate}\n      />\n      <UserList\n        users={users}\n        onToggle={onToggle}\n        onRemove={onRemove}\n      />\n      <div>활성 사용자 수: {count}</div>\n    </>\n  );\n}\n\nexport default App;\n",{"ruleId":"48","severity":1,"message":"49","line":2,"column":8,"nodeType":"50","messageId":"51","endLine":2,"endColumn":15},{"ruleId":"48","severity":1,"message":"52","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":13},{"ruleId":"48","severity":1,"message":"53","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":19},{"ruleId":"48","severity":1,"message":"54","line":7,"column":8,"nodeType":"50","messageId":"51","endLine":7,"endColumn":15},{"ruleId":"48","severity":1,"message":"55","line":1,"column":10,"nodeType":"50","messageId":"51","endLine":1,"endColumn":18},{"ruleId":"48","severity":1,"message":"49","line":2,"column":8,"nodeType":"50","messageId":"51","endLine":2,"endColumn":15},{"ruleId":"48","severity":1,"message":"52","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":13},{"ruleId":"48","severity":1,"message":"53","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":19},{"ruleId":"48","severity":1,"message":"54","line":7,"column":8,"nodeType":"50","messageId":"51","endLine":7,"endColumn":15},{"ruleId":"56","severity":1,"message":"57","line":95,"column":20,"nodeType":"50","endLine":95,"endColumn":31},{"ruleId":"56","severity":1,"message":"57","line":102,"column":20,"nodeType":"50","endLine":102,"endColumn":31},"no-unused-vars","'Counter' is defined but never used.","Identifier","unusedVar","'Hello' is defined but never used.","'InputSample' is defined but never used.","'Wrapper' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?"]